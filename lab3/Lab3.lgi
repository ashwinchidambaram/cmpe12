41 2 0
38 1
25 21 126 128 30
11 560 202 587 104 0 1
8 55 264 104 215 1 0
22 53 217 120 197 0 \NUL
Operation
22 24 161 113 141 0 \NUL
Keypad Input
20 170 152 229 133 0
K_0
20 170 82 229 63 0
K_3
20 170 105 229 86 0
K_2
20 170 129 229 110 0
K_1
19 476 137 535 118 0
K_3
19 465 163 524 144 0
K_2
19 466 190 525 171 0
K_1
19 465 215 524 196 0
K_0
8 56 392 105 343 1 1
22 78 344 200 324 0 \NUL
Perform Operation
8 59 505 108 456 0 1
22 55 455 148 435 0 \NUL
Zero Register
22 488 99 630 79 0 \NUL
Keyboard Input Value
22 281 28 420 8 0 \NUL
Page 1:  Input/Output
22 620 314 719 294 0 \NUL
Register Value
22 650 26 794 6 0 \NUL
Ashwin Chidambaram
22 758 64 794 44 0 \NUL
Lab3
22 701 83 794 63 0 \NUL
April 21, 2018
22 465 505 687 485 0 \NUL
All outputs taken from the register
22 411 248 659 228 0 \NUL
All outputs come straight from keypad
22 52 412 225 392 0 \NUL
Store values into Register
22 9 526 304 506 0 \NUL
Reset everything to zero (Do this at the start)
8 54 309 103 260 1 0
11 680 424 707 326 0 1
22 655 45 794 25 0 \NUL
achidam1@ucsc.edu
22 708 102 794 82 0 \NUL
Section: 01D
20 139 249 198 230 0
MSBsel
20 140 294 199 275 0
LSBsel
19 473 478 532 459 0
R0
19 473 452 532 433 0
R1
19 472 427 531 408 0
R2
19 472 400 531 381 0
R3
20 142 490 201 471 0
Reset
20 141 376 200 357 0
Store
1 171 142 125 116
1 125 110 171 119
1 171 95 125 104
1 125 98 171 72
1 561 186 521 205
1 561 180 522 180
1 521 153 561 174
1 561 168 532 127
1 101 239 140 239
1 141 284 100 284
1 681 408 529 468
1 681 402 529 442
1 528 417 681 396
1 681 390 528 390
1 105 480 143 480
1 102 367 142 366
38 2
22 8 27 104 7 0 \NUL
Register Page
15 203 81 252 32
24 233 126 282 54 1 1 1
7 289 67 338 18 0 1
19 144 102 203 83 0
Store
19 144 132 203 113 0
Reset
20 328 84 387 65 0
R3
15 206 201 255 152
24 236 246 285 174 1 1 1
7 292 187 341 138 0 1
19 147 222 206 203 0
Store
19 146 252 205 233 0
Reset
20 331 204 390 185 0
R2
15 207 316 256 267
24 237 361 286 289 1 1 1
7 293 302 342 253 0 1
19 148 337 207 318 0
Store
19 145 367 204 348 0
Reset
20 332 319 391 300 0
R1
15 209 446 258 397
24 239 491 288 419 1 1 1
7 295 432 344 383 0 1
19 150 467 209 448 0
Store
19 150 497 209 478 0
Reset
20 334 449 393 430 0
R0
19 149 437 208 418 0
Bit1
19 149 302 208 283 0
Bit2
19 148 189 207 170 0
Bit3
19 145 70 204 51 0
Bit4
22 64 467 98 447 0 \NUL
Bit 1
22 66 342 100 322 0 \NUL
Bit 2
22 61 229 95 209 0 \NUL
Bit 3
22 55 102 89 82 0 \NUL
Bit 4
22 341 551 758 531 0 \NUL
The Flip-Flops here store the bit value that comes from the MUX
1 249 56 247 56
1 279 74 290 42
1 234 92 200 92
1 279 74 329 74
1 252 176 250 176
1 282 194 293 162
1 237 212 203 212
1 282 194 332 194
1 253 291 251 291
1 283 309 294 277
1 238 327 204 327
1 283 309 333 309
1 255 421 253 421
1 285 439 296 407
1 240 457 206 457
1 285 439 335 439
1 205 427 240 439
1 205 292 238 309
1 204 179 237 194
1 201 60 234 74
1 200 122 247 122
1 202 242 250 242
1 251 357 201 357
1 206 487 253 487
38 3
22 15 32 50 12 0 \NUL
MUX
3 195 274 244 225 1 0
19 57 259 116 240 0
MSBsel
19 57 283 116 264 0
LSBsel
19 56 235 115 216 0
Store0
19 58 165 117 146 0
And0
19 58 97 117 78 0
Or0
19 59 28 118 9 0
Inv0
20 313 160 372 141 0
Bit1
5 144 288 193 239 0
5 133 274 182 225 0
3 197 203 246 154 1 0
19 59 188 118 169 0
MSBsel
19 59 212 118 193 0
LSBsel
5 135 203 184 154 0
3 198 134 247 85 1 0
19 60 119 119 100 0
MSBsel
19 60 143 119 124 0
LSBsel
5 147 148 196 99 0
3 197 66 246 17 1 0
19 59 51 118 32 0
MSBsel
19 59 75 118 56 0
LSBsel
4 261 175 310 126 2 0
3 582 275 631 226 1 0
19 444 260 503 241 0
MSBsel
19 444 284 503 265 0
LSBsel
19 443 236 502 217 0
Store1
19 445 165 504 146 0
And1
19 442 96 501 77 0
Or1
19 442 26 501 7 0
Inv1
20 696 152 755 133 0
Bit2
5 531 289 580 240 0
5 520 275 569 226 0
3 584 203 633 154 1 0
19 446 188 505 169 0
MSBsel
19 446 212 505 193 0
LSBsel
5 522 203 571 154 0
3 582 133 631 84 1 0
19 444 118 503 99 0
MSBsel
19 444 142 503 123 0
LSBsel
5 531 147 580 98 0
3 580 64 629 15 1 0
19 442 49 501 30 0
MSBsel
19 442 73 501 54 0
LSBsel
4 644 167 693 118 2 0
3 192 564 241 515 1 0
19 54 549 113 530 0
MSBsel
19 54 573 113 554 0
LSBsel
19 53 525 112 506 0
Store2
19 55 455 114 436 0
And2
19 55 387 114 368 0
Or2
19 56 318 115 299 0
Inv2
20 310 450 369 431 0
Bit3
5 141 578 190 529 0
5 130 564 179 515 0
3 194 493 243 444 1 0
19 56 478 115 459 0
MSBsel
19 56 502 115 483 0
LSBsel
5 132 493 181 444 0
3 195 424 244 375 1 0
19 57 409 116 390 0
MSBsel
19 57 433 116 414 0
LSBsel
5 144 438 193 389 0
3 194 356 243 307 1 0
19 56 341 115 322 0
MSBsel
19 56 365 115 346 0
LSBsel
4 258 465 307 416 2 0
3 579 564 628 515 1 0
19 441 549 500 530 0
MSBsel
19 441 573 500 554 0
LSBsel
19 440 525 499 506 0
Store3
19 442 455 501 436 0
And3
19 443 387 502 368 0
Or3
19 443 318 502 299 0
Inv3
20 697 450 756 431 0
Bit4
5 528 578 577 529 0
5 517 564 566 515 0
3 581 493 630 444 1 0
19 443 478 502 459 0
MSBsel
19 443 502 502 483 0
LSBsel
5 519 493 568 444 0
3 582 424 631 375 1 0
19 444 409 503 390 0
MSBsel
19 444 433 503 414 0
LSBsel
5 531 438 580 389 0
3 581 356 630 307 1 0
19 443 341 502 322 0
MSBsel
19 443 365 502 346 0
LSBsel
4 645 465 694 416 2 0
22 299 100 368 80 0 \NUL
MUX Bit 1
22 298 385 367 365 0 \NUL
MUX Bit 3
22 681 96 750 76 0 \NUL
MUX Bit 2
22 681 386 750 366 0 \NUL
MUX Bit 4
1 190 263 196 263
1 196 249 179 249
1 134 249 113 249
1 145 263 113 273
1 198 178 181 178
1 136 178 115 178
1 196 235 112 225
1 198 192 115 202
1 198 164 114 155
1 193 123 199 123
1 148 123 116 133
1 199 109 116 109
1 114 87 199 95
1 198 55 115 65
1 115 41 198 41
1 198 27 115 18
1 262 136 243 41
1 244 109 262 145
1 243 178 262 155
1 241 249 262 164
1 307 150 314 150
1 577 264 583 264
1 583 250 566 250
1 521 250 500 250
1 532 264 500 274
1 585 178 568 178
1 523 178 502 178
1 583 236 499 226
1 585 192 502 202
1 585 164 501 155
1 577 122 583 122
1 532 122 500 132
1 583 108 500 108
1 498 86 583 94
1 581 53 498 63
1 498 39 581 39
1 581 25 498 16
1 645 128 626 39
1 628 108 645 137
1 630 178 645 147
1 628 250 645 156
1 690 142 697 142
1 187 553 193 553
1 193 539 176 539
1 131 539 110 539
1 142 553 110 563
1 195 468 178 468
1 133 468 112 468
1 193 525 109 515
1 195 482 112 492
1 195 454 111 445
1 190 413 196 413
1 145 413 113 423
1 196 399 113 399
1 111 377 196 385
1 195 345 112 355
1 112 331 195 331
1 195 317 112 308
1 259 426 240 331
1 241 399 259 435
1 240 468 259 445
1 238 539 259 454
1 304 440 311 440
1 574 553 580 553
1 580 539 563 539
1 518 539 497 539
1 529 553 497 563
1 582 468 565 468
1 520 468 499 468
1 580 525 496 515
1 582 482 499 492
1 582 454 498 445
1 577 413 583 413
1 532 413 500 423
1 583 399 500 399
1 499 377 583 385
1 582 345 499 355
1 499 331 582 331
1 582 317 499 308
1 646 426 627 331
1 628 399 646 435
1 627 468 646 445
1 625 539 646 454
1 691 440 698 440
38 4
22 9 29 95 9 0 \NUL
STORE - [00]
19 193 257 252 238 0
K_2
20 477 257 536 238 0
Store2
19 193 232 252 213 0
K_3
20 477 232 536 213 0
Store3
19 193 308 252 289 0
K_0
20 477 308 536 289 0
Store0
19 193 283 252 264 0
K_1
20 477 283 536 264 0
Store1
22 115 166 320 146 0 \NUL
Keypad values broken into bits
22 461 193 549 173 0 \NUL
Send to MUX
22 145 484 593 464 0 \NUL
The STORE function simply sends the value from keypad to the MUX
1 249 247 478 247
1 249 222 478 222
1 249 298 478 298
1 249 273 478 273
38 5
22 10 30 78 10 0 \NUL
AND - [01]
19 287 385 346 366 0
R0
19 288 413 347 394 0
K_0
3 398 414 447 365 0 0
20 505 399 564 380 0
And0
22 243 413 277 393 0 \NUL
Bit 1
22 197 385 277 365 0 \NUL
Stored Bit 1
19 288 316 347 297 0
R1
19 289 344 348 325 0
K_1
3 399 345 448 296 0 0
20 506 330 565 311 0
And1
22 244 344 278 324 0 \NUL
Bit 2
22 198 316 278 296 0 \NUL
Stored Bit 2
19 288 245 347 226 0
R2
19 289 273 348 254 0
K_2
3 399 274 448 225 0 0
20 506 259 565 240 0
And2
22 244 273 278 253 0 \NUL
Bit 3
22 198 245 278 225 0 \NUL
Stored Bit 3
19 288 177 347 158 0
R3
19 289 205 348 186 0
K_3
3 399 206 448 157 0 0
20 506 191 565 172 0
And3
22 244 205 278 185 0 \NUL
Bit 4
22 198 177 278 157 0 \NUL
Stored Bit 4
22 127 113 344 93 0 \NUL
Inputs from Register and Keypad
22 499 146 576 126 0 \NUL
Out to MUX
22 60 536 703 516 0 \NUL
The AND function checks the binary value of keypad vs register and if AND true, it outputs 1; else 0
1 343 375 399 375
1 399 403 344 403
1 444 389 506 389
1 344 306 400 306
1 400 334 345 334
1 445 320 507 320
1 344 235 400 235
1 400 263 345 263
1 445 249 507 249
1 344 167 400 167
1 400 195 345 195
1 445 181 507 181
38 6
22 10 30 70 10 0 \NUL
OR - [10]
19 287 385 346 366 0
R0
19 288 413 347 394 0
K_0
20 505 399 564 380 0
Or0
22 243 413 277 393 0 \NUL
Bit 1
22 197 385 277 365 0 \NUL
Stored Bit 1
19 288 316 347 297 0
R1
19 289 344 348 325 0
K_1
20 506 330 565 311 0
Or1
22 244 344 278 324 0 \NUL
Bit 2
22 198 316 278 296 0 \NUL
Stored Bit 2
19 288 245 347 226 0
R2
19 289 273 348 254 0
K_2
20 506 259 565 240 0
Or2
22 244 273 278 253 0 \NUL
Bit 3
22 198 245 278 225 0 \NUL
Stored Bit 3
19 288 177 347 158 0
R3
19 289 205 348 186 0
K_3
20 506 191 565 172 0
Or3
22 244 205 278 185 0 \NUL
Bit 4
22 198 177 278 157 0 \NUL
Stored Bit 4
22 127 113 344 93 0 \NUL
Inputs from Register and Keypad
22 499 146 576 126 0 \NUL
Out to MUX
4 397 206 446 157 0 0
4 398 274 447 225 0 0
4 397 345 446 296 0 0
4 398 414 447 365 0 0
22 68 535 691 515 0 \NUL
The ORfunction checks the binary value of keypad vs register and if OR true, it outputs 1; else 0
1 344 403 399 403
1 399 375 343 375
1 444 389 506 389
1 507 320 443 320
1 507 249 444 249
1 507 181 443 181
1 398 167 344 167
1 398 195 345 195
1 399 235 344 235
1 399 263 345 263
1 398 306 344 306
1 345 334 398 334
38 7
22 9 29 98 9 0 \NUL
INVERT - [11]
19 193 257 252 238 0
R2
20 477 257 536 238 0
Inv2
19 193 232 252 213 0
R3
20 477 232 536 213 0
Inv3
19 193 308 252 289 0
R0
20 477 308 536 289 0
Inv0
19 193 283 252 264 0
R1
20 477 283 536 264 0
Inv1
22 115 166 320 146 0 \NUL
Keypad values broken into bits
22 472 193 560 173 0 \NUL
Send to MUX
5 294 323 343 274 0
5 332 298 381 249 0
5 370 272 419 223 0
5 408 247 457 198 0
22 137 512 597 492 0 \NUL
The INVERT function simply flips any 0 value to 1 and any 1 value to 0
1 249 298 295 298
1 340 298 478 298
1 378 273 478 273
1 416 247 478 247
1 454 222 478 222
1 333 273 249 273
1 371 247 249 247
1 409 222 249 222
39 16777215
47 0
40 1 6 6
50 800 600
51 0 100
30
System
16
700
0
0
0
0
0
34
